import XCTest
@testable import Secp256k1

class EcKeyTests: XCTestCase {
    func testEcKeyTweak() {
        let orderc: [UInt8] = [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe,
            0xba, 0xae, 0xdc, 0xe6, 0xaf, 0x48, 0xa0, 0x3b,
            0xbf, 0xd2, 0x5e, 0x8c, 0xd0, 0x36, 0x41, 0x41
        ]
        /* Group order is too large, reject. */
        var privKey = Secp256k1PrivateKey(bytes32: orderc)
        XCTAssertNil(privKey)
        
        /* Maximum value is too large, reject. */
        var ctmp = [UInt8](repeating: 255, count: 32)
        privKey = Secp256k1PrivateKey(bytes32: ctmp)
        XCTAssertNil(privKey)
        
        /* Zero is too small, reject. */
        ctmp = [UInt8](repeating: 0, count: 32)
        privKey = Secp256k1PrivateKey(bytes32: ctmp)
        XCTAssertNil(privKey)
        
        /* One must be accepted. */
        ctmp[31] = 0x01
        privKey = Secp256k1PrivateKey(bytes32: ctmp)
        XCTAssertNotNil(privKey)
        XCTAssertNotNil(privKey!.pubKey)
        
        /* Group order + 1 is too large, reject. */
        ctmp = orderc
        ctmp[31] = 0x42
        privKey = Secp256k1PrivateKey(bytes32: ctmp)
        XCTAssertNil(privKey)
        
        /* -1 must be accepted. */
        ctmp[31] = 0x40
        privKey = Secp256k1PrivateKey(bytes32: ctmp)
        XCTAssertNotNil(privKey)
        XCTAssertNotNil(privKey!.pubKey)
        let prevKeyNeg1 = privKey!
        let pubKeyNeg1 = privKey!.pubKey!
        
        /* Tweak of zero leaves the value changed. */
        let tweakZero = Secp256k1Tweak(s: Secp256k1Scalar.zero)
        try! privKey!.tweakAdd(tweak: tweakZero)
        XCTAssertEqual(privKey!, prevKeyNeg1)
        var pubKey = privKey!.pubKey!
        try! pubKey.tweakAdd(tweak: tweakZero)
        XCTAssertEqual(pubKey,  pubKeyNeg1)
        
        /* Multiply tweak of zero zeroizes the output. */
        XCTAssertThrowsError(try privKey!.tweakMul(tweak: tweakZero))
        XCTAssertThrowsError(try pubKey.tweakMul(tweak: tweakZero))
        
        /* Private key tweaks results in a key of zero. */
        ctmp = orderc
        ctmp[31] = 0x40
        privKey = Secp256k1PrivateKey(bytes32: ctmp)
        let tweakOne = Secp256k1Tweak(s: Secp256k1Scalar.one)
        XCTAssertThrowsError(try privKey!.tweakAdd(tweak: tweakOne))
        pubKey = pubKeyNeg1
        XCTAssertThrowsError(try pubKey.tweakAdd(tweak: tweakOne))
        
        /* Tweak computation wraps and results in a key of 1. */
        let two = Secp256k1Scalar(int: 2)
        let tweakTwo = Secp256k1Tweak(s: two)
        try! privKey!.tweakAdd(tweak: tweakTwo)
        XCTAssertEqual(privKey, Secp256k1PrivateKey(s: Secp256k1Scalar.one))
        try! pubKey.tweakAdd(tweak: tweakTwo)
        XCTAssertEqual(pubKey, Secp256k1PrivateKey(s: Secp256k1Scalar.one)!.pubKey)
        
        /* Tweak mul * 2 = 1+1. */
        var pubKey2 = pubKey
        try! pubKey.tweakAdd(tweak: Secp256k1Tweak(s: Secp256k1Scalar.one))
        try! pubKey2.tweakMul(tweak: Secp256k1Tweak(s: two))
        XCTAssertEqual(pubKey, pubKey2)
    }
    
    func testValidPublicKeySerialize() {
        let validPublicKeyBytes: [[UInt8]] = [
            [
                /* Point with leading and trailing zeros in x and y serialization. */
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x52,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x64, 0xef, 0xa1, 0x7b, 0x77, 0x61, 0xe1, 0xe4, 0x27, 0x06, 0x98, 0x9f, 0xb4, 0x83,
                0xb8, 0xd2, 0xd4, 0x9b, 0xf7, 0x8f, 0xae, 0x98, 0x03, 0xf0, 0x99, 0xb8, 0x34, 0xed, 0xeb, 0x00
            ],
            [
                /* Point with x equal to a 3rd root of unity.*/
                0x7a, 0xe9, 0x6a, 0x2b, 0x65, 0x7c, 0x07, 0x10, 0x6e, 0x64, 0x47, 0x9e, 0xac, 0x34, 0x34, 0xe9,
                0x9c, 0xf0, 0x49, 0x75, 0x12, 0xf5, 0x89, 0x95, 0xc1, 0x39, 0x6c, 0x28, 0x71, 0x95, 0x01, 0xee,
                0x42, 0x18, 0xf2, 0x0a, 0xe6, 0xc6, 0x46, 0xb3, 0x63, 0xdb, 0x68, 0x60, 0x58, 0x22, 0xfb, 0x14,
                0x26, 0x4c, 0xa8, 0xd2, 0x58, 0x7f, 0xdd, 0x6f, 0xbc, 0x75, 0x0d, 0x58, 0x7e, 0x76, 0xa7, 0xee,
            ],
            [
                /* Point with largest x. (1/2) */
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xfc, 0x2c,
                0x0e, 0x99, 0x4b, 0x14, 0xea, 0x72, 0xf8, 0xc3, 0xeb, 0x95, 0xc7, 0x1e, 0xf6, 0x92, 0x57, 0x5e,
                0x77, 0x50, 0x58, 0x33, 0x2d, 0x7e, 0x52, 0xd0, 0x99, 0x5c, 0xf8, 0x03, 0x88, 0x71, 0xb6, 0x7d,
            ],
            [
                /* Point with largest x. (2/2) */
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xfc, 0x2c,
                0xf1, 0x66, 0xb4, 0xeb, 0x15, 0x8d, 0x07, 0x3c, 0x14, 0x6a, 0x38, 0xe1, 0x09, 0x6d, 0xa8, 0xa1,
                0x88, 0xaf, 0xa7, 0xcc, 0xd2, 0x81, 0xad, 0x2f, 0x66, 0xa3, 0x07, 0xfb, 0x77, 0x8e, 0x45, 0xb2,
            ],
            [
                /* Point with smallest x. (1/2) */
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
                0x42, 0x18, 0xf2, 0x0a, 0xe6, 0xc6, 0x46, 0xb3, 0x63, 0xdb, 0x68, 0x60, 0x58, 0x22, 0xfb, 0x14,
                0x26, 0x4c, 0xa8, 0xd2, 0x58, 0x7f, 0xdd, 0x6f, 0xbc, 0x75, 0x0d, 0x58, 0x7e, 0x76, 0xa7, 0xee,
            ],
            [
                /* Point with smallest x. (2/2) */
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
                0xbd, 0xe7, 0x0d, 0xf5, 0x19, 0x39, 0xb9, 0x4c, 0x9c, 0x24, 0x97, 0x9f, 0xa7, 0xdd, 0x04, 0xeb,
                0xd9, 0xb3, 0x57, 0x2d, 0xa7, 0x80, 0x22, 0x90, 0x43, 0x8a, 0xf2, 0xa6, 0x81, 0x89, 0x54, 0x41,
            ],
            [
                /* Point with largest y. (1/3) */
                0x1f, 0xe1, 0xe5, 0xef, 0x3f, 0xce, 0xb5, 0xc1, 0x35, 0xab, 0x77, 0x41, 0x33, 0x3c, 0xe5, 0xa6,
                0xe8, 0x0d, 0x68, 0x16, 0x76, 0x53, 0xf6, 0xb2, 0xb2, 0x4b, 0xcb, 0xcf, 0xaa, 0xaf, 0xf5, 0x07,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xfc, 0x2e,
            ],
            [
                /* Point with largest y. (2/3) */
                0xcb, 0xb0, 0xde, 0xab, 0x12, 0x57, 0x54, 0xf1, 0xfd, 0xb2, 0x03, 0x8b, 0x04, 0x34, 0xed, 0x9c,
                0xb3, 0xfb, 0x53, 0xab, 0x73, 0x53, 0x91, 0x12, 0x99, 0x94, 0xa5, 0x35, 0xd9, 0x25, 0xf6, 0x73,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xfc, 0x2e,
            ],
            [
                /* Point with largest y. (3/3) */
                0x14, 0x6d, 0x3b, 0x65, 0xad, 0xd9, 0xf5, 0x4c, 0xcc, 0xa2, 0x85, 0x33, 0xc8, 0x8e, 0x2c, 0xbc,
                0x63, 0xf7, 0x44, 0x3e, 0x16, 0x58, 0x78, 0x3a, 0xb4, 0x1f, 0x8e, 0xf9, 0x7c, 0x2a, 0x10, 0xb5,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xfc, 0x2e,
            ],
            [
                /* Point with smallest y. (1/3) */
                0x1f, 0xe1, 0xe5, 0xef, 0x3f, 0xce, 0xb5, 0xc1, 0x35, 0xab, 0x77, 0x41, 0x33, 0x3c, 0xe5, 0xa6,
                0xe8, 0x0d, 0x68, 0x16, 0x76, 0x53, 0xf6, 0xb2, 0xb2, 0x4b, 0xcb, 0xcf, 0xaa, 0xaf, 0xf5, 0x07,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
            ],
            [
                /* Point with smallest y. (2/3) */
                0xcb, 0xb0, 0xde, 0xab, 0x12, 0x57, 0x54, 0xf1, 0xfd, 0xb2, 0x03, 0x8b, 0x04, 0x34, 0xed, 0x9c,
                0xb3, 0xfb, 0x53, 0xab, 0x73, 0x53, 0x91, 0x12, 0x99, 0x94, 0xa5, 0x35, 0xd9, 0x25, 0xf6, 0x73,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
            ],
            [
                /* Point with smallest y. (3/3) */
                0x14, 0x6d, 0x3b, 0x65, 0xad, 0xd9, 0xf5, 0x4c, 0xcc, 0xa2, 0x85, 0x33, 0xc8, 0x8e, 0x2c, 0xbc,
                0x63, 0xf7, 0x44, 0x3e, 0x16, 0x58, 0x78, 0x3a, 0xb4, 0x1f, 0x8e, 0xf9, 0x7c, 0x2a, 0x10, 0xb5,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01
            ]
        ]
        
        var bytes65 = [UInt8](repeating: 0, count: 65)
        let zeros65 = [UInt8](repeating: 0, count: 65)
        var bytes33 = [UInt8](repeating: 0, count: 33)
        
        for i in 0..<validPublicKeyBytes.count {
            // no odd/even
            bytes65[0] = 0x04
            bytes65[1..<65] = validPublicKeyBytes[i][0..<64]
            let pubKey = Secp256k1PublicKey(bytes33or65: bytes65)
            XCTAssertNotNil(pubKey, "pubkey deserialize \(i)")
            
            bytes65[0..<65] = zeros65[0..<65]
            try! pubKey?.serialize(bytes33or65: &bytes65, compress: false)
            XCTAssertEqual(validPublicKeyBytes[i][0..<64], bytes65[1..<65])
            XCTAssertEqual(bytes65[0], 0x04)
            
            // correct odd/even
            let isOdd = validPublicKeyBytes[i][63] & 1 == 1
            bytes65[0] = isOdd ? 0x07 : 0x06
            let pubKey3 = Secp256k1PublicKey(bytes33or65: bytes65)
            XCTAssertNotNil(pubKey3)
            XCTAssertEqual(pubKey, pubKey3)
            
            // wrong odd/even
            bytes65[0] = isOdd ? 0x06 : 0x07
            let pubKey4 = Secp256k1PublicKey(bytes33or65: bytes65)
            XCTAssertNil(pubKey4)
            
            bytes33[0] = 0x02 | (isOdd ? 0x01 : 0x00)
            bytes33[1..<33] = validPublicKeyBytes[i][0..<32]
            let pubKey2 = Secp256k1PublicKey(bytes33or65: bytes33)
            XCTAssertNotNil(pubKey2)
            XCTAssertEqual(pubKey, pubKey2)
            
            bytes33[0..<33] = zeros65[0..<33]
            try! pubKey?.serialize(bytes33or65: &bytes33, compress: true)
            XCTAssertEqual(validPublicKeyBytes[i][0..<32], bytes33[1..<33])
            XCTAssertEqual(bytes33[0], isOdd ? 0x03 : 0x02)
        }
    }
    
    func testInvalidXYPublicKeySerialize() {
        let invalidXYBytes: [[UInt8]] = [
            [
                /* x is third root of -8, y is -1 * (x^3+7); also on the curve for y^2 = x^3 + 9. */
                0x0a, 0x2d, 0x2b, 0xa9, 0x35, 0x07, 0xf1, 0xdf, 0x23, 0x37, 0x70, 0xc2, 0xa7, 0x97, 0x96, 0x2c,
                0xc6, 0x1f, 0x6d, 0x15, 0xda, 0x14, 0xec, 0xd4, 0x7d, 0x8d, 0x27, 0xae, 0x1c, 0xd5, 0xf8, 0x53,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
            ],
            [
                /* Valid if x overflow ignored (x = 1 mod p). */
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xfc, 0x30,
                0x42, 0x18, 0xf2, 0x0a, 0xe6, 0xc6, 0x46, 0xb3, 0x63, 0xdb, 0x68, 0x60, 0x58, 0x22, 0xfb, 0x14,
                0x26, 0x4c, 0xa8, 0xd2, 0x58, 0x7f, 0xdd, 0x6f, 0xbc, 0x75, 0x0d, 0x58, 0x7e, 0x76, 0xa7, 0xee,
            ],
            [
                /* Valid if x overflow ignored (x = 1 mod p). */
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xfc, 0x30,
                0xbd, 0xe7, 0x0d, 0xf5, 0x19, 0x39, 0xb9, 0x4c, 0x9c, 0x24, 0x97, 0x9f, 0xa7, 0xdd, 0x04, 0xeb,
                0xd9, 0xb3, 0x57, 0x2d, 0xa7, 0x80, 0x22, 0x90, 0x43, 0x8a, 0xf2, 0xa6, 0x81, 0x89, 0x54, 0x41,
            ],
            [
                /* x is -1, y is the result of the sqrt ladder; also on the curve for y^2 = x^3 - 5. */
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xfc, 0x2e,
                0xf4, 0x84, 0x14, 0x5c, 0xb0, 0x14, 0x9b, 0x82, 0x5d, 0xff, 0x41, 0x2f, 0xa0, 0x52, 0xa8, 0x3f,
                0xcb, 0x72, 0xdb, 0x61, 0xd5, 0x6f, 0x37, 0x70, 0xce, 0x06, 0x6b, 0x73, 0x49, 0xa2, 0xaa, 0x28,
            ],
            [
                /* x is -1, y is the result of the sqrt ladder; also on the curve for y^2 = x^3 - 5. */
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xfc, 0x2e,
                0x0b, 0x7b, 0xeb, 0xa3, 0x4f, 0xeb, 0x64, 0x7d, 0xa2, 0x00, 0xbe, 0xd0, 0x5f, 0xad, 0x57, 0xc0,
                0x34, 0x8d, 0x24, 0x9e, 0x2a, 0x90, 0xc8, 0x8f, 0x31, 0xf9, 0x94, 0x8b, 0xb6, 0x5d, 0x52, 0x07,
            ],
            [
                /* x is zero, y is the result of the sqrt ladder; also on the curve for y^2 = x^3 - 7. */
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x8f, 0x53, 0x7e, 0xef, 0xdf, 0xc1, 0x60, 0x6a, 0x07, 0x27, 0xcd, 0x69, 0xb4, 0xa7, 0x33, 0x3d,
                0x38, 0xed, 0x44, 0xe3, 0x93, 0x2a, 0x71, 0x79, 0xee, 0xcb, 0x4b, 0x6f, 0xba, 0x93, 0x60, 0xdc,
            ],
            [
                /* x is zero, y is the result of the sqrt ladder; also on the curve for y^2 = x^3 - 7. */
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x70, 0xac, 0x81, 0x10, 0x20, 0x3e, 0x9f, 0x95, 0xf8, 0xd8, 0x32, 0x96, 0x4b, 0x58, 0xcc, 0xc2,
                0xc7, 0x12, 0xbb, 0x1c, 0x6c, 0xd5, 0x8e, 0x86, 0x11, 0x34, 0xb4, 0x8f, 0x45, 0x6c, 0x9b, 0x53
            ]
        ]
        
        var bytes65 = [UInt8](repeating: 0, count: 65)
        var bytes33 = [UInt8](repeating: 0, count: 33)
        
        for i in 0..<invalidXYBytes.count {
            // no odd/even
            bytes65[0] = 0x04
            bytes65[1..<65] = invalidXYBytes[i][0..<64]
            let pubKey = Secp256k1PublicKey(bytes33or65: bytes65)
            XCTAssertNil(pubKey)
            
            bytes33[0] = 0x02
            bytes33[1..<33] = invalidXYBytes[i][0..<32]
            let pubKey2 = Secp256k1PublicKey(bytes33or65: bytes33)
            XCTAssertNil(pubKey2)
        }
    }
    
    func testInvalidYPublicKeySerializations() {
        let invalidYBytes: [[UInt8]] = [
            [
                /* Valid if y overflow ignored (y = 1 mod p). (1/3) */
                0x1f, 0xe1, 0xe5, 0xef, 0x3f, 0xce, 0xb5, 0xc1, 0x35, 0xab, 0x77, 0x41, 0x33, 0x3c, 0xe5, 0xa6,
                0xe8, 0x0d, 0x68, 0x16, 0x76, 0x53, 0xf6, 0xb2, 0xb2, 0x4b, 0xcb, 0xcf, 0xaa, 0xaf, 0xf5, 0x07,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xfc, 0x30,
            ],
            [
                /* Valid if y overflow ignored (y = 1 mod p). (2/3) */
                0xcb, 0xb0, 0xde, 0xab, 0x12, 0x57, 0x54, 0xf1, 0xfd, 0xb2, 0x03, 0x8b, 0x04, 0x34, 0xed, 0x9c,
                0xb3, 0xfb, 0x53, 0xab, 0x73, 0x53, 0x91, 0x12, 0x99, 0x94, 0xa5, 0x35, 0xd9, 0x25, 0xf6, 0x73,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xfc, 0x30,
            ],
            [
                /* Valid if y overflow ignored (y = 1 mod p). (3/3)*/
                0x14, 0x6d, 0x3b, 0x65, 0xad, 0xd9, 0xf5, 0x4c, 0xcc, 0xa2, 0x85, 0x33, 0xc8, 0x8e, 0x2c, 0xbc,
                0x63, 0xf7, 0x44, 0x3e, 0x16, 0x58, 0x78, 0x3a, 0xb4, 0x1f, 0x8e, 0xf9, 0x7c, 0x2a, 0x10, 0xb5,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xfc, 0x30,
            ],
            [
                /* x on curve, y is from y^2 = x^3 + 8. */
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03
            ]
        ]
        
        var bytes65 = [UInt8](repeating: 0, count: 65)
        var bytes33 = [UInt8](repeating: 0, count: 33)
        
        for i in 0..<invalidYBytes.count {
            // no odd/even
            bytes65[0] = 0x04
            bytes65[1..<65] = invalidYBytes[i][0..<64]
            let pubKey = Secp256k1PublicKey(bytes33or65: bytes65)
            XCTAssertNil(pubKey)
            
            bytes33[0] = 0x02
            bytes33[1..<33] = invalidYBytes[i][0..<32]
            let pubKey2 = Secp256k1PublicKey(bytes33or65: bytes33)
            XCTAssertNotNil(pubKey2)
        }
    }
    
    func testPrivateKeySerialization() {
        var randp = Secp256k1KeyGenerator()
        
        for _ in 0..<5 {
            let (privKey, privKeyBytes) = randp.genPrivateKeyWithBytes()
            XCTAssertNotNil(privKey)
            let pubKey = privKey.pubKey
            XCTAssertNotNil(pubKey)
            XCTAssertEqual(pubKey, Secp256k1PublicKey.init(privKey: privKey))
            
            var serializedPrivKeyBytes = [UInt8](repeating: 0, count: 32)
            try! privKey.serialize(bytes32: &serializedPrivKeyBytes)
            XCTAssertEqual(serializedPrivKeyBytes, privKeyBytes)
        }
    }
    
    func testPublicKeyCombine() {
        let count = 6
        var pubKeys: [Secp256k1PublicKey] = []
        var randp = Secp256k1KeyGenerator()
        var sum = Secp256k1Scalar.zero
        
        for _ in 0..<count {
            let privKey = randp.genPrivateKey()
            sum.add(privKey.privKey)
            pubKeys.append(privKey.pubKey!)
        }
        
        let combinedPubKey = try! Secp256k1PublicKey.combine(pubKeys: pubKeys)
        let summedPubKey = Secp256k1PrivateKey(s: sum)!.pubKey
        XCTAssertEqual(summedPubKey, combinedPubKey)
    }
    
    func testPubKeyAtInfinity() {
        let privKeyBytes: [UInt8] = [0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                     0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe,
                                     0xba, 0xae, 0xdc, 0xe6, 0xaf, 0x48, 0xa0, 0x3b,
                                     0xbf, 0xd2, 0x5e, 0x8c, 0xd0, 0x36, 0x41, 0x41]
        let privKey = Secp256k1PrivateKey(bytes32: privKeyBytes)
        XCTAssertNil(privKey)
    }
    
    func testPublicKeyExportComaptibity() {
        let publicKeyBytes: [[UInt8]] = [[3,197,199,143,72,224,53,194,245,169,213,17,185,189,55,55,235,167,117,21,50,208,78,173,164,196,86,82,6,9,222,213,73],[2,236,189,172,210,32,129,83,192,33,80,160,152,85,73,22,60,101,58,142,135,130,28,75,118,59,215,56,7,29,178,122,90],[2,253,133,232,93,59,70,128,225,188,62,142,91,216,162,191,156,91,234,130,251,193,60,1,214,220,242,128,102,238,202,151,148],[2,139,230,198,225,144,41,18,165,192,180,44,198,55,220,214,29,19,99,248,56,77,18,226,190,22,226,169,233,14,153,62,204],[3,162,22,126,218,86,107,48,1,207,2,55,66,242,44,93,104,250,133,77,250,74,51,109,215,6,73,24,52,121,86,18,244],[3,179,208,98,15,205,35,131,142,97,27,48,143,127,132,125,13,232,175,163,74,255,254,8,12,166,127,3,252,212,214,45,114],[3,2,250,69,120,56,203,225,125,26,40,214,40,17,41,56,202,222,249,175,157,15,24,75,128,83,2,100,213,22,111,154,175],[2,38,197,16,81,208,4,174,239,109,153,243,222,87,94,251,196,27,164,55,132,6,202,173,172,83,117,45,4,79,216,49,222],[2,157,196,51,215,168,165,68,182,102,156,82,34,207,129,107,104,218,212,94,164,94,147,49,181,188,9,169,8,223,240,53,33],[3,49,117,10,73,45,31,25,190,37,104,80,233,14,220,2,145,26,73,214,111,207,96,212,42,123,20,60,90,2,173,111,179],[2,214,28,136,226,75,171,109,153,145,18,120,248,220,121,51,5,21,113,228,250,78,28,148,78,156,23,158,6,2,229,38,179],[3,44,243,91,137,65,104,59,201,63,217,74,157,45,183,140,182,137,59,74,17,42,54,247,254,113,25,218,16,153,74,63,124],[2,116,120,133,117,44,122,124,114,32,147,183,202,83,87,65,179,26,229,210,72,16,70,159,40,121,115,84,217,230,23,113,237],[2,61,164,159,241,176,163,152,81,251,110,234,109,166,4,166,240,77,145,187,36,169,212,171,83,234,154,24,227,121,196,115,155],[2,44,207,18,229,184,0,148,235,43,15,7,243,53,233,217,252,228,211,176,36,94,76,222,47,219,37,121,171,38,42,165,214],[2,11,23,84,39,178,130,181,186,211,217,144,47,168,197,252,17,90,16,187,84,120,213,49,177,24,176,160,194,119,125,27,210],[2,40,73,149,69,14,196,255,247,97,55,6,46,150,115,16,148,238,188,198,255,34,142,226,121,75,7,194,28,118,148,79,121],[3,55,97,18,172,185,255,252,153,106,179,27,164,46,10,204,8,90,1,178,74,188,198,51,91,27,202,187,91,212,225,161,33],[3,83,100,216,5,162,190,201,127,42,70,93,39,183,93,145,191,208,64,15,174,174,0,26,232,0,217,42,244,172,20,146,187],[2,109,148,169,21,195,226,166,87,110,168,68,128,207,249,152,114,28,124,58,99,33,20,6,73,164,75,241,164,232,62,35,195],[2,255,166,147,122,83,46,179,121,82,233,190,56,17,249,190,39,144,126,142,171,119,198,91,43,25,83,76,51,234,132,244,48],[3,201,50,102,206,6,58,161,181,78,194,53,146,212,217,153,30,198,185,213,59,78,160,154,136,80,167,101,39,79,157,77,66],[3,79,9,70,34,228,31,13,23,68,54,134,149,198,224,124,77,185,182,221,136,241,66,209,233,138,79,25,223,85,5,140,219],[3,236,225,134,42,49,137,227,249,83,40,2,210,248,98,116,150,124,134,9,222,95,175,208,113,38,193,232,61,101,199,228,31],[2,193,3,46,21,69,6,123,198,110,155,93,234,68,223,107,93,142,178,204,121,67,25,61,174,103,45,217,208,197,44,52,97],[3,206,204,250,5,46,83,88,254,132,183,153,251,187,112,9,145,138,26,97,44,196,185,51,169,43,98,37,241,184,138,4,56],[2,189,126,174,225,83,16,180,59,182,177,206,29,253,70,30,56,183,81,124,78,25,224,234,135,4,192,15,33,216,96,203,140],[3,194,29,245,232,100,200,140,78,74,91,148,222,229,250,123,184,130,216,216,207,110,37,88,65,27,42,219,253,244,228,226,233],[2,177,203,22,99,12,80,215,178,235,59,113,177,8,122,157,222,231,248,156,176,80,218,103,84,150,203,159,234,127,67,73,58],[2,5,13,176,106,64,159,70,48,87,143,76,252,186,251,213,195,120,173,69,60,55,121,197,128,26,23,52,14,214,224,123,55],[2,119,238,101,191,194,152,85,58,162,168,28,141,203,243,85,89,219,117,92,103,229,126,157,229,186,179,128,236,183,194,126,248],[3,3,230,108,246,113,217,108,251,165,140,4,128,95,55,100,199,247,89,199,151,142,168,136,107,174,167,49,203,48,178,234,11],[3,156,229,62,70,202,228,219,81,21,226,73,88,198,28,164,102,181,9,214,96,77,105,45,17,81,220,193,74,121,44,208,0],[2,192,174,51,122,73,114,118,74,220,244,22,242,250,1,207,201,108,28,205,170,29,241,29,59,77,164,224,122,60,18,31,206],[2,78,78,136,19,214,254,213,198,196,62,196,68,250,27,100,148,102,83,31,244,245,243,215,15,183,4,175,203,242,123,46,91],[3,249,95,65,220,240,247,236,170,155,192,117,251,137,179,82,179,80,45,212,243,184,188,119,131,1,212,214,241,169,118,44,239],[3,224,138,203,86,87,60,16,8,92,43,8,216,201,165,96,175,165,170,116,156,63,36,4,109,122,152,19,1,174,129,209,207],[3,161,150,126,194,184,124,251,84,30,142,224,52,142,238,141,55,224,27,58,150,159,207,225,85,33,32,243,56,131,197,6,163],[3,254,235,82,233,226,105,253,2,158,80,202,204,10,115,229,52,22,151,112,26,196,87,32,83,106,49,213,42,147,90,186,234],[2,27,149,213,221,31,254,29,241,52,194,173,81,100,189,50,115,185,202,46,237,164,159,207,205,98,166,96,0,135,182,70,231],[2,130,249,138,38,122,80,78,84,25,73,15,179,204,153,14,163,202,18,86,24,37,195,231,196,92,136,214,182,101,174,250,12],[3,217,70,89,8,76,166,28,10,91,45,103,205,204,194,0,204,167,31,81,136,50,208,226,67,101,90,33,63,198,59,101,2],[2,252,175,238,182,110,254,249,112,117,32,119,155,234,169,199,195,100,200,169,69,147,251,119,28,234,194,44,123,173,107,43,183],[3,130,75,184,194,218,251,131,11,57,67,76,29,103,177,150,226,145,234,176,136,90,215,166,210,46,184,80,130,70,82,252,169],[3,159,140,97,190,76,140,79,60,104,63,154,98,125,124,112,230,169,223,234,179,125,104,8,95,133,211,116,60,135,234,95,48],[3,9,237,111,143,250,249,93,191,146,126,1,212,251,44,58,170,97,87,133,230,62,36,18,91,228,89,41,60,78,12,5,212],[2,19,91,81,43,19,114,143,151,102,234,76,12,161,193,169,233,164,27,42,251,144,65,202,110,182,150,41,185,43,196,24,28],[2,97,180,9,178,234,22,27,76,231,73,24,32,19,160,35,236,128,216,150,199,208,68,116,31,69,114,75,248,173,244,121,204],[3,11,16,21,120,2,104,201,184,68,93,42,10,139,164,217,8,33,17,251,145,115,252,254,192,212,90,232,106,38,79,87,248],[3,128,173,138,50,125,164,223,158,116,147,167,23,237,13,65,141,112,19,37,101,142,205,43,52,215,26,168,238,37,202,90,104],[2,227,40,209,28,176,134,11,199,106,167,2,40,56,86,173,104,139,19,145,215,214,140,215,237,225,177,138,210,111,200,36,54],[2,240,185,234,70,95,81,140,138,182,195,208,149,226,104,56,46,154,59,241,179,43,173,175,106,32,31,252,6,234,60,188,78],[3,44,220,19,217,253,207,223,178,150,79,5,128,4,5,204,10,218,174,197,58,29,201,213,143,115,23,251,152,91,141,98,102],[3,90,184,16,249,200,179,33,165,94,207,124,46,41,120,115,19,139,205,16,113,44,253,156,34,26,171,166,192,162,245,117,132],[2,184,253,252,171,178,222,4,149,240,106,39,161,74,211,119,134,44,72,54,102,9,143,17,68,103,9,247,40,40,249,185,180],[2,4,96,14,96,169,246,251,153,30,0,233,100,188,0,8,19,199,79,150,37,177,87,114,153,153,52,62,105,246,167,228,174],[3,205,81,158,136,153,163,64,225,187,252,179,60,186,52,193,104,2,185,203,2,69,22,96,118,58,229,197,242,122,67,186,238],[2,122,250,3,247,183,107,207,200,226,68,155,234,94,117,62,84,79,101,81,249,1,122,240,134,253,27,206,114,242,134,222,68],[2,50,181,88,70,107,155,33,108,179,166,130,127,248,50,91,52,70,192,40,219,226,246,78,42,13,104,77,175,182,250,155,96],[2,26,132,58,149,241,13,134,233,118,140,69,243,162,20,85,82,7,84,56,40,99,199,93,200,228,2,151,196,104,173,95,111],[3,183,7,161,215,205,154,107,30,49,215,178,149,239,232,152,122,30,34,248,184,12,254,107,177,105,110,69,40,89,71,211,16],[2,34,200,169,140,221,90,155,233,35,190,209,77,206,110,188,235,192,72,181,61,66,213,6,223,20,93,42,153,210,233,78,25],[2,163,190,109,64,64,237,158,17,61,10,186,214,121,174,105,71,40,19,18,107,221,154,251,78,166,141,151,25,157,21,191,104],[2,40,60,74,53,15,22,75,25,3,145,5,236,20,21,202,206,215,59,52,225,34,51,201,169,148,9,104,131,184,70,236,48],[2,234,240,162,83,190,220,10,49,1,121,99,134,107,52,237,67,66,96,89,73,134,61,215,122,210,115,59,100,42,96,150,154],[3,84,86,14,49,85,223,186,134,208,20,0,65,238,247,232,103,234,67,200,160,225,98,27,197,228,202,196,196,56,144,74,3],[3,142,240,248,171,137,127,116,70,155,2,23,205,178,239,216,39,45,209,13,234,230,194,41,201,100,144,169,247,67,255,183,18],[3,205,34,12,13,105,183,49,225,214,207,2,211,203,178,145,182,24,85,105,44,177,209,94,209,84,108,118,36,177,51,193,67],[2,6,180,198,175,183,235,133,234,89,243,88,140,150,173,3,250,15,97,160,235,50,158,43,132,77,194,9,58,56,13,5,109],[3,177,141,28,31,160,61,193,61,225,53,63,229,21,82,182,136,243,169,239,60,158,133,213,49,120,149,173,250,237,247,173,238],[3,23,32,245,74,231,47,184,17,232,150,193,15,239,204,61,243,40,85,127,79,116,122,62,74,80,19,67,72,146,19,121,167],[3,179,205,119,34,198,16,201,118,48,93,223,54,241,201,199,192,254,64,118,51,110,227,89,81,222,41,101,90,188,227,105,107],[3,249,247,214,241,218,248,160,198,11,141,179,206,76,92,76,225,151,244,168,108,25,101,203,0,94,42,246,56,68,49,101,126],[3,239,57,62,26,80,122,88,210,201,137,125,39,115,39,225,139,211,176,198,220,236,156,52,38,231,89,245,2,204,207,143,161],[2,237,77,108,40,81,207,116,183,98,32,234,146,224,72,77,106,103,73,219,205,145,46,145,53,236,225,115,138,115,241,117,238],[3,139,177,246,113,0,53,198,2,245,166,20,242,76,139,44,24,63,74,14,74,209,89,71,86,189,14,96,80,93,11,66,124],[3,151,75,243,77,220,159,118,142,91,146,7,95,97,109,226,116,200,16,66,197,182,30,246,188,33,245,69,22,111,43,106,27],[2,164,61,91,152,162,246,46,167,191,91,54,178,23,91,59,73,73,222,70,166,32,232,187,167,132,234,244,242,48,222,234,193],[2,241,33,154,196,106,174,245,125,158,198,88,241,229,69,132,173,22,179,143,232,214,75,30,188,234,134,179,197,126,34,135,131],[2,135,146,10,151,8,121,235,95,79,88,208,220,141,210,123,221,31,163,136,73,181,149,224,44,178,14,197,175,178,215,209,234],[2,2,230,122,186,214,61,137,96,128,52,166,13,230,175,147,184,44,34,75,140,176,90,105,91,45,93,213,39,154,254,16,150],[3,59,32,23,177,148,51,65,91,253,161,6,20,33,255,6,28,37,23,57,44,24,224,135,148,210,198,59,65,168,25,232,240],[2,71,105,154,93,194,116,102,86,20,149,212,126,193,226,185,141,197,91,33,167,137,195,51,51,63,228,92,173,193,127,125,80],[3,122,142,98,70,167,118,66,108,220,169,141,151,9,209,106,49,10,91,63,238,32,244,171,102,145,55,163,120,251,93,45,82],[3,97,17,145,109,130,86,233,119,112,3,19,218,83,49,50,167,136,231,23,28,233,28,182,87,193,11,200,205,158,73,114,165],[2,179,35,141,226,208,184,12,211,47,223,175,123,243,53,149,126,113,79,166,199,77,30,15,1,89,192,86,243,89,112,37,170],[3,210,116,37,128,184,169,145,102,242,73,113,125,216,7,115,100,219,229,22,20,119,212,179,221,211,242,20,78,70,165,128,127],[2,7,92,155,84,23,7,216,101,177,189,118,133,201,254,135,37,144,64,161,223,15,122,89,68,77,110,62,131,233,43,35,171],[2,248,42,215,86,79,22,18,23,174,43,110,176,97,193,186,152,187,105,86,196,147,132,110,111,127,23,184,254,217,5,84,161],[3,23,254,5,139,122,118,102,118,200,185,136,115,1,109,172,204,53,117,147,27,116,38,197,51,198,229,117,162,205,2,117,113],[3,214,159,116,91,140,113,24,159,52,86,253,165,252,112,70,249,117,255,46,119,219,140,204,86,50,94,149,167,244,37,62,24],[2,132,244,133,169,238,164,117,75,45,240,130,120,177,136,58,111,88,12,110,150,235,20,213,249,71,50,139,63,144,158,228,159],[2,4,115,39,55,234,141,62,142,107,251,245,166,230,141,113,238,242,247,94,117,147,178,246,77,236,10,6,99,176,172,104,117],[2,139,139,41,127,217,203,15,186,202,99,0,191,114,126,135,189,197,252,215,176,113,91,33,118,54,171,59,72,21,160,89,2],[3,62,43,237,222,50,102,84,98,93,239,34,51,185,154,190,101,0,231,253,254,75,12,236,20,158,244,212,255,190,16,143,219],[2,13,107,239,63,255,203,172,110,188,189,56,39,255,105,156,250,34,33,156,76,219,98,20,216,179,241,19,139,107,83,123,246],[2,25,99,224,28,48,4,56,164,124,213,96,36,241,129,123,32,21,66,186,45,196,128,117,51,145,187,1,42,217,245,171,134],[3,210,47,45,16,187,139,54,176,125,162,193,134,246,128,226,246,225,116,212,33,22,221,106,92,189,25,169,48,137,40,93,225],[2,127,180,52,213,29,0,134,226,36,33,120,104,75,47,135,187,237,66,239,247,129,193,154,34,58,126,15,151,244,251,162,16],[3,34,18,220,198,112,147,218,41,35,7,102,188,240,180,155,190,5,219,3,28,243,77,74,153,180,245,101,166,161,82,117,186],[3,197,54,100,255,67,232,63,39,194,106,43,195,150,201,45,106,42,204,169,181,100,118,245,218,2,16,26,193,67,233,155,221],[3,241,164,187,59,196,112,168,36,14,255,180,62,81,107,43,110,165,189,189,149,12,123,216,178,185,244,173,188,216,111,162,117],[3,100,69,96,52,8,164,202,154,10,28,4,104,143,217,125,226,157,156,32,138,64,7,203,188,69,138,5,193,76,25,117,209],[2,163,53,235,78,113,100,156,239,163,182,198,171,204,220,164,169,108,192,64,224,232,210,61,157,128,189,23,14,76,195,59,179],[3,129,6,42,162,33,112,206,115,106,157,181,95,223,254,27,187,35,196,74,193,128,223,178,156,157,11,12,126,37,239,127,240],[2,32,160,251,10,245,8,58,134,90,233,47,193,207,3,119,254,5,130,163,177,130,220,67,52,144,35,132,77,22,109,114,204],[2,36,23,236,217,105,209,36,105,107,74,177,224,32,93,139,81,73,20,63,255,143,230,32,207,2,172,67,236,52,50,194,44],[3,118,57,86,138,218,169,19,44,47,227,141,107,164,25,0,254,25,166,199,149,4,173,121,38,83,243,42,17,25,18,251,36],[2,21,150,113,144,148,5,147,78,146,77,107,139,97,195,92,170,78,57,5,32,23,230,153,65,217,121,37,182,125,187,243,30],[3,17,196,149,71,241,209,6,38,86,131,142,143,167,64,6,197,4,89,153,39,95,0,50,166,49,28,180,137,190,166,233,120],[2,229,55,191,207,78,104,212,103,248,188,175,165,38,207,172,34,192,46,246,212,86,223,84,114,181,172,201,125,80,215,234,187],[3,127,106,239,208,148,39,112,139,92,33,47,90,195,235,88,126,156,156,124,161,39,144,31,30,164,143,95,124,116,240,117,114],[3,33,67,117,79,42,4,192,121,221,243,56,188,180,2,167,94,232,62,134,132,98,195,76,108,41,245,175,60,162,42,165,244],[2,55,223,235,177,207,186,220,139,79,137,91,51,220,104,210,116,205,145,243,240,174,218,77,4,242,126,191,148,14,138,218,209],[3,248,230,246,203,146,116,118,178,112,120,11,117,248,238,10,3,189,127,29,222,68,73,83,208,203,75,207,137,30,139,110,185],[2,204,108,7,232,147,46,128,46,133,124,55,185,133,91,74,61,233,233,162,150,152,223,85,117,162,170,181,158,143,116,153,242],[2,14,194,204,39,50,98,127,73,165,236,158,251,158,34,153,216,166,249,46,82,40,157,234,136,2,102,111,7,8,32,32,154],[2,82,13,104,198,63,47,107,117,24,59,237,87,171,10,144,86,131,47,112,234,114,41,248,133,209,220,247,169,226,234,26,19],[3,71,242,88,14,125,157,75,244,0,20,137,72,196,129,118,208,46,134,141,211,151,239,223,228,158,199,116,15,25,104,121,192],[3,17,68,200,82,49,245,50,106,77,47,119,121,90,26,94,175,232,225,98,212,133,138,72,208,12,229,28,189,202,170,231,191],[3,126,198,125,86,27,171,48,237,60,179,252,74,169,132,188,118,211,147,100,187,74,146,98,106,55,176,152,173,98,241,209,218],[2,59,111,151,110,232,91,3,91,137,67,2,139,241,89,160,90,93,93,176,163,68,28,5,231,82,14,7,85,194,57,249,33],[3,219,227,81,138,40,70,163,0,67,245,219,82,112,192,121,243,208,40,131,119,119,191,167,190,18,248,210,214,74,8,98,107],[2,97,175,53,171,54,158,208,145,20,243,14,206,70,204,41,107,216,215,80,201,193,21,181,124,243,18,203,153,180,238,183,64],[3,222,32,96,144,239,21,31,181,152,83,202,92,24,187,55,185,27,133,167,140,64,134,62,250,111,222,131,97,78,219,167,34],[2,184,145,46,200,109,133,74,223,181,77,185,203,133,239,207,130,135,228,119,182,106,116,175,253,216,137,231,114,241,18,251,89],[2,88,151,61,223,244,65,25,160,51,101,40,100,31,249,72,131,204,37,22,82,207,155,105,41,134,204,14,182,163,60,144,106],[3,33,49,65,22,87,20,169,244,216,2,141,115,228,203,148,49,193,19,175,18,141,68,142,40,94,8,57,26,3,69,150,57],[3,118,177,205,71,128,160,201,15,110,58,172,202,38,111,123,255,37,168,213,253,179,6,221,224,241,156,148,80,217,181,136,167],[2,143,162,47,237,220,190,158,55,51,198,251,222,104,215,253,61,14,230,140,176,47,127,174,238,131,143,67,162,153,154,222,49],[2,241,22,90,40,84,151,225,137,24,202,174,190,84,66,65,244,5,192,254,189,32,14,147,35,29,235,50,56,137,215,118,122],[2,125,105,102,91,233,218,216,248,162,111,216,212,144,49,74,105,245,101,138,247,34,243,216,198,121,124,14,41,19,128,11,164],[2,24,252,21,192,42,239,214,81,111,213,120,234,47,101,99,246,161,97,206,105,66,23,121,158,234,82,111,116,51,89,49,166],[3,153,79,182,38,224,159,127,128,190,221,92,155,34,255,114,153,245,217,72,8,112,59,63,176,88,243,211,175,8,242,59,14],[2,250,139,156,178,105,123,116,199,154,251,0,248,28,223,214,255,39,153,180,141,135,233,78,217,211,96,141,226,40,116,50,143],[3,201,20,232,157,132,21,209,240,30,64,4,63,199,138,188,83,95,87,16,111,102,240,46,38,186,104,16,7,36,177,134,160],[3,35,6,24,14,78,58,100,226,179,133,208,233,116,210,227,196,50,131,39,103,233,106,107,112,35,95,172,246,203,211,119,63],[2,241,210,251,67,177,95,27,103,148,100,106,203,110,253,179,113,152,221,155,179,70,29,27,24,57,110,131,129,203,141,119,171],[2,98,63,236,47,141,107,242,234,193,207,195,212,96,110,27,68,67,14,176,175,111,112,29,253,198,133,129,164,4,113,124,185],[3,59,164,19,233,200,183,49,252,237,4,114,206,52,170,134,129,101,107,92,46,26,76,203,156,35,8,84,202,101,17,231,96],[2,65,74,251,165,133,253,225,132,51,127,0,40,211,94,190,77,93,65,157,234,22,106,107,16,66,111,96,37,113,67,156,60],[3,183,94,123,10,168,85,103,250,132,41,15,139,149,33,19,251,135,184,224,164,216,2,242,28,181,175,26,156,78,62,213,45],[2,114,193,133,163,176,4,46,107,243,75,229,204,181,160,194,90,190,168,58,196,19,138,28,114,190,11,11,103,235,88,93,216],[3,71,87,217,111,69,143,223,213,150,197,79,158,55,154,172,6,23,149,44,31,157,63,31,96,173,76,192,169,18,143,97,128],[3,33,72,251,173,65,254,142,37,85,199,35,239,253,8,15,123,45,73,166,70,182,164,137,58,73,21,165,164,39,207,208,136],[3,43,205,33,88,221,232,26,82,251,234,144,29,10,129,154,36,174,209,47,147,82,23,201,42,245,78,142,8,116,8,132,82],[3,211,125,249,166,170,250,212,199,109,99,195,229,129,226,126,220,21,79,222,198,113,126,166,203,101,197,66,231,84,119,157,219],[2,236,54,36,105,48,65,48,254,154,238,33,95,185,247,121,135,186,15,150,196,58,17,40,18,203,187,60,178,222,240,127,135],[3,187,231,238,11,95,170,12,236,211,145,60,134,20,155,141,155,5,103,3,238,85,95,37,10,60,51,202,167,149,81,248,149],[2,118,175,212,98,241,187,41,217,101,122,202,102,214,241,239,193,40,127,78,172,49,53,28,167,93,198,241,141,245,220,63,116],[2,33,175,232,50,38,57,68,29,196,118,108,124,188,148,26,81,109,3,46,162,129,66,1,198,63,89,156,94,157,151,9,138],[3,35,99,198,202,189,0,82,29,72,36,72,238,206,66,186,109,234,188,252,1,170,67,120,70,172,255,223,161,32,111,72,194],[2,7,243,93,194,154,234,117,57,134,71,47,121,156,64,162,37,82,83,143,243,182,203,29,63,71,246,96,36,171,149,234,77]]
        
        var bytes65 = [UInt8](repeating: 0, count: 65)
        var bytes33 = [UInt8](repeating: 0, count: 33)
        
        for pubKeyBytes in publicKeyBytes {
            XCTAssertTrue(pubKeyBytes.count == 33 || pubKeyBytes.count == 65)
            let pubKey = Secp256k1PublicKey(bytes33or65: pubKeyBytes)
            XCTAssertNotNil(pubKey)
            let compressed = pubKeyBytes.count == 33
            
            if compressed {
                try! pubKey!.serialize(bytes33or65: &bytes33, compress: true)
                XCTAssertEqual(bytes33, pubKeyBytes)
                try! pubKey!.serialize(bytes33or65: &bytes65, compress: true)
                XCTAssertEqual(bytes65[0..<33], pubKeyBytes[0..<33])
            } else {
                try! pubKey!.serialize(bytes33or65: &bytes65, compress: false)
                XCTAssertEqual(bytes65, pubKeyBytes)
            }
        }
    }
}
